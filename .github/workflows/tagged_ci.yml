# Workflow that should run on new semver tags
# * Publishes tagged docker images and python wheels

name: Tagged CI
run-name: CI for tag ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_call:
    inputs:
      containerfile:
        description: >
          Path to the containerfile for building the image.
          Pass 'None' to prevent building an image.
        default: 'Dockerfile'
        required: false
        type: string
      enable_pypi:
        description: >
          Whether to build a wheel and publish to PyPI.
          Ensure calling workflow is a trusted PyPI source.
        default: false
        required: false
        type: boolean

# Specify concurrency such that only one workflow can run at a time
# * Different workflow files are not affected
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  # Job for building container image
  # * Builds and pushes an OCI Container image to the registry defined in the environment variables
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: ${{ inputs.containerfile != 'None' }}

    steps:
      # Do a non-shallow clone of the repo to ensure tags are present
      # * This allows setuptools-git-versioning to automatically set the version
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Tag the built image according to the event type
      # The event is a semver release, so use the version
      - name: Extract metadata (tags, labels) for Container
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=semver,pattern={{version}},value=${{ needs.bump-tag.outputs.tag }}

      # Build and push the Container image to the registry
      # * Creates a multiplatform-aware image
      # * Pulls build cache from the registry and pushes new cache back
      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.containerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  build-wheel:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    if: ${{ inputs.enable_pypi }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Build package
        run: uv build

      - name: Publish package
        run: uv publish -t ${{ secrets.PYPI_API_TOKEN }}
    
