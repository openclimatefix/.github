# Workflow that should run on pushes to non-default branches, for Python
# * Lints, tests, and builds dev containers with branch changes
#
# Example usage:
#
# name: Non-Default Branch Push CI (Python)
#
# on:  
#   push:
#     branches-ignore: ['main']
#     paths-ignore: ['README.md']
#
# jobs:
#   run_non_default_branch_push_ci:
#     uses: openclimatefix/.github/.github/workflows/nondefault_branch_push_ci_python.yml@main
#     with:
#       containerfile: Containerfile
#     secrets: inherit

name: Non-Default Branch Push CI (Python)

on:
  workflow_call:
    inputs:
      containerfile:
        description: >
          Path to the containerfile for building the image.
          Pass 'None' to skip building.
        default: 'Dockerfile'
        required: false
        type: string
      enable_linting:
        description: >
          Whether to run linting against the repository
          (requires ruff in the `dev` dependency group)
        default: true
        required: false
        type: boolean
      enable_typechecking:
        description: >
          Whether to typecheck the repository
          (requires mypy in the `dev` dependency group)
        default: true
        required: false
        type: boolean
      tests_folder:
        description: 'Folder to search for tests in'
        default: 'src/tests'
        required: false
        type: string
      tests_runner:
        description: 'Which test runner to use (`pytest` or `unittest`)'
        default: 'pytest'
        required: false
        type: string
      tests_conda_deps:
        description: >
          Any binaries required to be installed by conda for the tests to run
          (seperated by spaces e.g. `cfgrib esmpy`)
        default: ''
        required: false
        type: string

# Specify concurrency such that only one workflow can run at a time
# * Different workflow files are not affected
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Registry for storing Container images
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job to run a linter and typechecker against the codebase
  lint-typecheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install editable package and required dependencies
        if: ${{ inputs.enable_linting || inputs.enable_typechecking }}
        run: uv sync

      - name: Lint package
        if: ${{ inputs.enable_linting }}
        run: |
          uv run ruff check --output-format=github .

      - name: Typecheck package
        if: ${{ inputs.enable_typechecking }}
        run: uv run mypy .
        # TODO: GitHub output when https://github.com/python/mypy/pull/17771 merged

  # Job to run unittests
  # * Optionally installs binaries using conda
  # * Produces a JUnit XML report that can be displayed in the GitHub UI
  test-unit:
    runs-on: ubuntu-latest
    needs: lint-typecheck
    container: quay.io/condaforge/miniforge3:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-py
        with:
          python-version-file: "pyproject.toml"

      - name: Install conda requirements
        if: ${{ inputs.tests_conda_deps }} # An empty string evaluates to false
        env:
          PYTHON_VERSION: ${{ steps.setup-py.outputs.python-version }}
        run: >
          conda create --quiet --yes -p .venv 
          python=${PYTHON_VERSION%.*}
          ${{ inputs.tests_conda_deps }}

      - name: Install editable package and required dependencies
        run: uv sync --inexact

      # Run unittests
      # * Produce JUnit XML report
      # * TODO: Work out how to pass environment variables to test
      - name: Run unit tests (with pytest)
        if: ${{ inputs.tests_runner != 'unittest' }}
        run: uv run python -m pytest --junitxml=ut-report.xml ${{ inputs.tests_folder }}
      - name: Run unit tests (with unittest)
        if: ${{ inputs.tests_runner == 'unittest' }}
        run: uv run python -m xmlrunner discover -s ${{ inputs.tests_folder }} -p "test_*.py" --output-file ut-report.xml

      # Create test summary to be visualised on the job summary screen on GitHub
      # * Runs even if previous steps fail
      - name: Create test summary
        uses: test-summary/action@v2
        with:
          paths: "*t-report.xml"
          show: "fail, skip"
        if: always()

  # Job for building container image
  # * Builds and pushes an OCI Container image to the registry defined in the environment variables
  # * Only runs if test and lint jobs pass
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: ["lint-typecheck", "test-unit"]
    if: ${{ inputs.containerfile != 'None' && github.repository_owner == 'openclimatefix' && github.event_name != 'pull_request' }}

    steps:
      # Do a non-shallow clone of the repo to ensure tags are present
      # * This allows setuptools-git-versioning to automatically set the version
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Tag the built image according to the event type
      # The event is a branch commit, so use the commit sha
      - name: Extract metadata (tags, labels) for Container
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=ref,event=branch

      # Build and push the Container image to the registry
      # * Creates a multiplatform-aware image
      # * Pulls build cache from the registry
      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.containerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
