name: Python Tests
on:
  workflow_call:
    inputs:
      pytest_cov_dir:
        required: false
        type: string
        default: 'unassigned'
      pytest_numcpus:
        required: false
        type: string
        default: '2'
      sudo_apt_install:
        # this can be set to 'libgeos-dev libproj-dev', so that for a linux machine, these packages are installed.
        required: false
        type: string
        default: ''
      brew_install:
        # for mac machine, these are extra packages that are installed
        required: false
        type: string
        default: 'c-blosc hdf5'
      os_list:
        # which systems to run the tests on
        default: '["ubuntu-latest", "macos-latest"]'
        type: string
        required: false
      workdir:
        description: 'The directory of the root of the python project'
        default: '.'
        required: false
        type: string
      python-version:
        description: 'The python versions to use'
        default: "['3.9', '3.10']"
        required: false
        type: string


jobs:
  run-python-tests:
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-version) }}
        os: "${{ fromJSON(inputs.os_list) }}"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Do some macOS specific installs for Python 3.9
        run: |
          brew install ${{inputs.brew_install}}
        if: matrix.os == 'macos-latest'
      - name: Do some Ubunutu specific installs for Python 3.9
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ${{inputs.sudo_apt_install}}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install git+https://github.com/SheffieldSolar/PV_Live-API#pvlive_api
          if [ -f "setup.py" ]; then pip install -e .; else export PYTHONPATH=$PYTHONPATH:./src; fi
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
      - name: Setup with pytest-xdist
        run: |
          # lets get the string for how many cpus to use with pytest
          echo "Will be using ${{ inputs.pytest_numcpus }} cpus for pytest testing"
          #
          # make PYTESTXDIST
          export PYTESTXDIST="-n ${{ inputs.pytest_numcpus }}"
          if [ ${{ inputs.pytest_numcpus }} -gt 0 ]; then export PYTESTXDIST="$PYTESTXDIST --dist=loadfile"; fi
          #
          # echo results and save env var for other jobs
          echo "pytest-xdist options that will be used are: $PYTESTXDIST"
          echo "PYTESTXDIST=$PYTESTXDIST" >> $GITHUB_ENV
      - name: Setup with pytest-cov
        run: |
          # let make pytest run with coverage
          echo "Will be looking at coverage of dir  ${{ inputs.pytest_cov_dir }}"
          #
          # install pytest-cov
          pip install coverage==6.2 # https://github.com/nedbat/coveragepy/issues/1312
          pip install pytest-cov
          #
          # make PYTESTCOV
          export PYTESTCOV="--cov=${{ inputs.pytest_cov_dir }} --cov-report=xml"
          if [ ${{ inputs.pytest_cov_dir }} == "unassigned" ]; then export PYTESTCOV=""; fi
          #
          # echo results and save env var for other jobs
          echo "pytest-cov options that will be used are: $PYTESTCOV"
          echo "PYTESTCOV=$PYTESTCOV" >> $GITHUB_ENV
      - name: Run pytest
        run: |
          export PYTEST_COMMAND="pytest $PYTESTCOV $PYTESTXDIST -s"
          echo "Will be running this command: $PYTEST_COMMAND"
          eval $PYTEST_COMMAND
      - name: Show coverage
        run: coverage report -m
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
